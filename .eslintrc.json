{
  "root": true,
  "env": {
    "browser": true,
    "es2022": true,
    "jest": true
  },
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module"
  },
  "overrides": [
    {
      "files": ["*.ts"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": ["./tsconfig.json", "./tsconfig.spec.json"]
      },
      "plugins": ["@typescript-eslint", "@angular-eslint"],
      "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended", "plugin:@angular-eslint/recommended"],
      "settings": {
        "import/resolver": {
          "typescript": {
            "project": ["./tsconfig.json", "./tsconfig.spec.json"]
          }
        }
      },
      "rules": {
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/ban-ts-comment": "warn",
        "@angular-eslint/no-input-rename": "off",
        "@angular-eslint/prefer-on-push-component-change-detection": ["error"],
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterOverload": true,
            "exceptAfterSingleLine": true
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "private-static-field",
              "#private-static-field",
              "protected-static-field",
              "public-static-field",
              "public-static-get",
              "public-static-set",
              "protected-static-get",
              "protected-static-set",
              "private-static-get",
              "#private-static-get",
              "private-static-set",
              "#private-static-set",
              "static-method",
              "decorated-field",
              "public-decorated-get",
              "public-decorated-set",
              "protected-decorated-get",
              "protected-decorated-set",
              "private-decorated-get",
              "private-decorated-set",
              "private-field",
              "#private-field",
              "protected-field",
              "public-field",
              "constructor",
              "public-method",
              "protected-method",
              "private-method",
              "#private-method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE", "PascalCase"]
          },
          {
            "selector": "property",
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "class",
            "format": ["PascalCase"]
          },
          {
            "selector": "method",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "property",
            "modifiers": ["requiresQuotes"],
            "format": null
          }
        ],
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-extraneous-class": [
          "error",
          {
            "allowWithDecorator": true,
            "allowStaticOnly": true
          }
        ],
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "ignoreRestSiblings": true,
            "destructuredArrayIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/adjacent-overload-signatures": "off",
        "no-prototype-builtins": "off",
        "no-console": [
          "error",
          {
            "allow": ["error", "warn", "info"]
          }
        ],
        "no-debugger": "error",
        "no-nested-ternary": "error",
        "no-return-assign": ["error", "except-parens"],
        "no-useless-escape": "error",
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": "*",
            "next": "return"
          },
          {
            "blankLine": "always",
            "prev": "block-like",
            "next": "*"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": "block-like"
          },
          {
            "blankLine": "always",
            "prev": "class",
            "next": "*"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": "class"
          },
          {
            "blankLine": "always",
            "prev": ["const", "let", "var"],
            "next": "*"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": ["const", "let", "var"]
          },
          {
            "blankLine": "any",
            "prev": ["const", "let", "var"],
            "next": ["const", "let", "var"]
          },
          {
            "blankLine": "never",
            "prev": ["case", "default"],
            "next": ["case", "default"]
          }
        ]
      }
    },
    {
      "files": ["*.spec.ts"],
      "extends": "plugin:jest/recommended",
      "env": {
        "jest": true
      },
      "rules": {
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": ["Component", "Mock"]
          }
        ],
        "@angular-eslint/directive-class-suffix": [
          "error",
          {
            "suffixes": ["Directive", "Mock"]
          }
        ],
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": "block-like",
            "next": "*"
          },
          {
            "blankLine": "always",
            "prev": "*",
            "next": "block-like"
          }
        ],
        "@typescript-eslint/no-non-null-assertion": "off"
      }
    },
    {
      "files": ["*.component.html"],
      "extends": ["plugin:prettier/recommended", "plugin:@angular-eslint/template/recommended"],
      "rules": {
        "@angular-eslint/template/prefer-self-closing-tags": "error",
        "@angular-eslint/template/prefer-control-flow": "warn",
        "@angular-eslint/template/button-has-type": "warn",
        "@angular-eslint/template/no-negated-async": "off",
        "@angular-eslint/template/attributes-order": [
          "off",
          {
            "alphabetical": false,
            "order": [
              "STRUCTURAL_DIRECTIVE",
              "TEMPLATE_REFERENCE",
              "ATTRIBUTE_BINDING",
              "INPUT_BINDING",
              "TWO_WAY_BINDING",
              "OUTPUT_BINDING"
            ]
          }
        ],
        "prettier/prettier": [
          "error",
          {
            "parser": "angular"
          }
        ]
      }
    },
    {
      "files": ["*.mock.ts"],
      "rules": {
        "@typescript-eslint/no-empty-function": "off",
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": ["Component", "Mock"]
          }
        ],
        "@angular-eslint/directive-class-suffix": [
          "error",
          {
            "suffixes": ["Directive", "Mock"]
          }
        ]
      }
    }
  ]
}
